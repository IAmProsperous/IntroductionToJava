1) Add the test to test equality
	@Test
	public void testEquality()
	{
		
	}
	
2) Add the first two tests for null object passed in and non-Person object passed in
   as well as the test for two equal Person objects where no properties are set.
	//<object>.equals(null) should be false!
	assertFalse("Person should not be equal to null once instantiated"
					, myPerson.equals(null));
	//<object>.equals(<differentObject>) should be false!
	assertFalse("Person should not be equal to a non-person object"
					, myPerson.equals("This is a String"));
	
	//test all default state --> first/last = null && age = 0
	Person p = new Person();
	assertTrue("Two person objects should be equal when no properties are set"
					+ "on either object"
					, myPerson.equals(p));
	assertTrue("Two person objects should be equal when no properties are set"
			+ "on either object"
			, p.equals(myPerson));
			
	//run the tests and watch them fail
	
3) Implement the equality override
	/**
     * Override Equality
     * @param o The object to test for equality
     * @return boolean representing whether or not the incoming
     * 			object is equal to this object.
     */
    public boolean equals(Object obj)
    {
    	return false;
    }
   
    //run the tests and watch them fail 

4) Implement the code to satisfy the equality tests for null obj, non-person obj, and two
	equal Person objects with nothing set (age will be 0)
	What we see is that we will also cover case when ages are the only thing set so we can add that test too
	
	//add these tests:
	//just age to compare
		//default
		myPerson = new Person();
		p = new Person();
		assertTrue("Person objects should be equal when there is no last name, "
				+ "no first name, ages match"
				, myPerson.equals(p));
		assertTrue("Person objects should be equal when there is no last name, "
				+ "no first name, and ages match"
				, p.equals(myPerson));
		//ages don't match
		myPerson.setLastName(null);
		myPerson.setFirstName(null);
		myPerson.setAge(100);
		p.setLastName(null);
		p.setFirstName(null);
		p.setAge(age);
		assertFalse("Person objects should not be equal when there is no last name, "
				+ "no first name, and ages do not match"
				, myPerson.equals(p));
		assertFalse("Person objects should not be equal when there is no last name, "
				+ "no first name, and ages do not match"
				, p.equals(myPerson));
		//ages match not default
		myPerson.setLastName(null);
		myPerson.setFirstName(null);
		myPerson.setAge(age);
		p.setLastName(null);
		p.setFirstName(null);
		p.setAge(age);
		assertTrue("Person objects should be equal when there is no last name, "
				+ "no first name, ages match"
				, myPerson.equals(p));
		assertTrue("Person objects should be equal when there is no last name, "
				+ "no first name, and ages match"
				, p.equals(myPerson));
	//test still fail
	
	//and here is the code as it stands now
	/**
     * Override Equality
     * @param o The object to test for equality
     * @return boolean representing whether or not the incoming
     * 			object is equal to this object.
     */
    public boolean equals(Object obj)
    {
    	//an object cannot be equal to null
    	//and an object Person must be passed in or the 
    	//    two objects are not equal
    	if (obj == null || !(obj instanceof Person))
    	{
    		return false;
    	}
    	
    	//now we know that the incoming object is a person
    	Person p = (Person)obj;
    	
    	//determine the properties to compare for equality
    	//in this case, lastname, firstname, age
    	//good practice would be to test the one that is MOST likely not equal
    	//in this case, that would be the last name or age.
    	//this will just help the method end more quickly if something doesn't match
    	//in the end, we need to make sure that all properties aren't equal, and it could
    	//be done in any order, as long as it's done correctly.
    	
    	//we know we have two non-null Person objects at this point, but properties may not
    	//be set.  So we need to keep that in mind as we go.  Let's do Last Name, age, first name
    	//as our order of least likely to be equal (it's really arbitrary!)
    	
    	//first get the state of each side
    	boolean thisLastNameNull = this.getLastName() == null;
    	boolean thisFirstNameNull = this.getFirstName() == null;
    	boolean thisAgeZero = this.getAge() == 0;
    	boolean objLastNameNull = p.getLastName() == null;
    	boolean objFirstNameNull = p.getFirstName() == null;
    	boolean objAgeZero = p.getAge() == 0;
    	
    	
    	if (thisLastNameNull && objLastNameNull)
    	{
    		//last names null
    		if (thisFirstNameNull && objFirstNameNull)
    		{
    			//first names null, can just return equality on ages
    			//handles both set and unset ages
    			return this.getAge() == p.getAge();
    		}
    	}
    	else if (!thisLastNameNull && !objLastNameNull)
    	{
    		//both last names set
    	}

    	//if not all properties are equally set, the objects can't be
    	//equal!
    	return false;
    }
    
    //run tests to assure they pass as expected.
    
5) Set tests to find equality when just the first name is set, remember to handle first case-sensitivity:

		//just first name set
		//one name is null
		myPerson.setLastName(null);
		myPerson.setFirstName(firstName);
		myPerson.setAge(0);
		p.setLastName(null);
		p.setFirstName(null);
		p.setAge(0);
		assertFalse("Person objects should not be equal when there is no last name, "
				+ "only one has a first name set, and ages are not set"
				, myPerson.equals(p));
		assertFalse("Person objects should not be equal when there is no last name, "
				+ "only one has a first name set, and ages are not set"
				, p.equals(myPerson));
		
		//names don't match
		myPerson.setLastName(null);
		myPerson.setFirstName("Andrew");
		myPerson.setAge(0);
		p.setLastName(null);
		p.setFirstName(firstName);
		p.setAge(0);
		assertFalse("Person objects should not be equal when there is no last name, "
				+ "first names do not match, and ages match"
				, myPerson.equals(p));
		assertFalse("Person objects should not be equal when there is no last name, "
				+ "first names do not match, and ages match"
				, p.equals(myPerson));
		
		//ages match not default
		myPerson.setLastName(null);
		myPerson.setFirstName(firstName);
		myPerson.setAge(0);
		p.setLastName(null);
		p.setFirstName(firstName);
		p.setAge(0);
		assertTrue("Person objects should be equal when there is no last name, "
				+ "first names match, and ages are not set"
				, myPerson.equals(p));
		assertTrue("Person objects should be equal when there is no last name, "
				+ "first names match, and ages are not set"
				, p.equals(myPerson));
				
				
		//does case matter?  you have to make that call!
		//if this should be equal for your system
		//you have to set the asserts to True, explain the details
		//and make sure to change the code in Person equality to use
		//equals, instead of equalsIgnoreCase
		myPerson.setLastName(null);
		myPerson.setFirstName("anyFirstName");
		myPerson.setAge(0);
		p.setLastName(null);
		p.setFirstName("AnYFIrstNAME");
		p.setAge(0);
		assertFalse("Person objects should not be equal when there is no last name, "
				+ "first names do not match on case, and ages are not set"
				, myPerson.equals(p));
		assertFalse("Person objects should not be equal when there is no last name, "
				+ "first names do not match on case, and ages are not set"
				, p.equals(myPerson));
				
				
6) Add the code to handle when just the first names are set
	
		if (thisLastNameNull && objLastNameNull)
    	{
    		//last names null
    		if (thisFirstNameNull && objFirstNameNull)
    		{
    			//first names null, can just return equality on ages
    			//handles both set and unset ages
    			return this.getAge() == p.getAge();
    		}
    		else if (!thisFirstNameNull && !objFirstNameNull)
    		{
    			//remember, we already know from our grid that
    			//if only one is null, then objects are automatically 
    			//not equal so we don't have to code those two if statements!
    			//also, we can rely on string equality
    			//NOTE: If case matters to you, then you have to use equalsIgnoreCase
    			return this.getFirstName().equals(p.getFirstName());
    			//another note: At this point we've ignored age. we'll have to fix this..
    		}
    	}
    	else if (!thisLastNameNull && !objLastNameNull)
    	{
    		//both last names set
    	}
    	
7) Add the tests for when no last name but both first and age are set to something non-zero
   remember to handle first case-sensitivity
   	
   	/******* No Last Name, but first and age are set *********/
		//we've already tested when one first name is null. Age can't be null
		//both equal
		myPerson.setLastName(null);
		myPerson.setFirstName(firstName);
		myPerson.setAge(age);
		p.setLastName(null);
		p.setFirstName(firstName);
		p.setAge(age);
		assertTrue("Person objects should be equal when there is no last name, "
				+ "first names match, and ages match"
				, myPerson.equals(p));
		assertTrue("Person objects should be equal when there is no last name, "
				+ "first names match, and ages match"
				, p.equals(myPerson));
		
		//first equal, age not equal
		myPerson.setLastName(null);
		myPerson.setFirstName(firstName);
		myPerson.setAge(age);
		p.setLastName(null);
		p.setFirstName(firstName);
		p.setAge(100);
		assertFalse("Person objects should not be equal when there is no last name, "
				+ "first names match, and ages do not match"
				, myPerson.equals(p));
		assertFalse("Person objects should not be equal when there is no last name, "
				+ "first names match, and ages do not match"
				, p.equals(myPerson));
		
		//first not equal, age doesn't matter in this case
		myPerson.setLastName(null);
		myPerson.setFirstName(firstName);
		myPerson.setAge(age);
		p.setLastName(null);
		p.setFirstName("Andrew");
		p.setAge(100);
		assertFalse("Person objects should not be equal when there is no last name, "
				+ "and first names do not match"
				, myPerson.equals(p));
		assertFalse("Person objects should not be equal when there is no last name, "
				+ "and first names do not match"
				, p.equals(myPerson));
				
		//run the tests and watch them fail
8) Add the code to handle the case where both first and age are set

	else if (!thisFirstNameNull && !objFirstNameNull)
	{
		//remember, we already know from our grid that
		//if only one is null, then objects are automatically 
		//not equal so we don't have to code those two if statements!
		//also, we can rely on string equality
		//NOTE: If case matters to you, then you have to use equalsIgnoreCase
		_returnValue = this.getFirstName().equals(p.getFirstName());
		if (_returnValue)
		{
			_returnValue = this.getAge() == p.getAge();
		}
		return _returnValue;
	}
	
9) Add tests for the case when only last name is set.  Remember lastname case-sensitivity also need to be handled.
	/****** JUST LAST NAME SET **************/
		//equal
		myPerson.setLastName(lastName);
		myPerson.setFirstName(null);
		myPerson.setAge(0);
		p.setLastName(lastName);
		p.setFirstName(null);
		p.setAge(0);
		assertTrue("Person objects should be equal when last names match, "
				+ "first names are not set, and ages are not set"
				, myPerson.equals(p));
		assertTrue("Person objects should be equal when last names match, "
				+ "first names are not set, and ages are not set"
				, p.equals(myPerson));
		
		//last names not equal (first name and age irrelevant)
		myPerson.setLastName(lastName);
		myPerson.setFirstName(null);
		myPerson.setAge(0);
		p.setLastName("Andrews");
		p.setFirstName(null);
		p.setAge(0);
		assertFalse("Person objects should not be equal when last names do not match, "
				+ "regardless of first name and age"
				, myPerson.equals(p));
		assertFalse("Person objects should not be equal when last names do not match, "
				+ "regardless of first name and age"
				, p.equals(myPerson));
		
		//last name case-sensitivity
		myPerson.setLastName("anyLastName");
		myPerson.setFirstName(null);
		myPerson.setAge(0);
		p.setLastName("AnYLAsTNaME");
		p.setFirstName(null);
		p.setAge(0);
		assertFalse("Person objects should not be equal when last names do not match"
				+ " on case.  FirstName and Age are irrelevant"
				, myPerson.equals(p));
		assertFalse("Person objects should not be equal when last names do not match"
				+ " on case.  FirstName and Age are irrelevant"
				, p.equals(myPerson));
				
		//run the tests and watch them fail
		
10) Add the code to handle last name equality
		else if (!thisLastNameNull && !objLastNameNull)
    	{
    		//anticipating the next states, we'll just set to a value
    		//remember, case-sensitivity would require equalsIgnoreCase
    		_returnValue = this.getLastName().equals(p.getLastName());
    		if (_returnValue)
    		{
    			//code for also having first name/age set will go here
    		}
    		return _returnValue;
    	}
    	
    	//run the tests and watch them pass.
	
11) Add the tests to handle the case when last name and age are set
		/********** LAST NAME AND AGE ONLY, NO FIRST NAME *************************/
		//equal
		myPerson.setLastName(lastName);
		myPerson.setFirstName(null);
		myPerson.setAge(age);
		p.setLastName(lastName);
		p.setFirstName(null);
		p.setAge(age);
		assertTrue("Person objects should be equal when last names match, "
				+ "first names are not set, and ages match"
				, myPerson.equals(p));
		assertTrue("Person objects should be equal when last names match, "
				+ "first names are not set, and ages match"
				, p.equals(myPerson));
		
		//ages not equal
		myPerson.setLastName(lastName);
		myPerson.setFirstName(null);
		myPerson.setAge(age);
		p.setLastName(lastName);
		p.setFirstName(null);
		p.setAge(100);
		assertFalse("Person objects should not be equal when last names match, "
				+ "first names are not set, and ages do not match"
				, myPerson.equals(p));
		assertFalse("Person objects should not be equal when last names match, "
				+ "first names are not set, and ages do not match"
				, p.equals(myPerson));
		
		//we don't need to test if lastnames aren't equal, as we've already don that
		
		//run the tests and watch them fail.
		
12) Add the code to handle the case when last name and age are set
	
		else if (!thisLastNameNull && !objLastNameNull)
    	{
    		//anticipating the next states, we'll just set to a value
    		//remember, case-sensitivity would require equalsIgnoreCase
    		_returnValue = this.getLastName().equals(p.getLastName());
    		if (_returnValue)
    		{
    			//code for also having first name/age set will go here
    			//age comparison
    			_returnValue = this.getAge() == p.getAge();
    		}
    		return _returnValue;
    	}
    	
    	//run the tests and watch them pass
    	
13) Add the tests to test when last name and first name are set.

		/******************* LAST NAME AND FIRST NAME ONLY **********************/
		//equal
		myPerson.setLastName(lastName);
		myPerson.setFirstName(firstName);
		myPerson.setAge(0);
		p.setLastName(lastName);
		p.setFirstName(firstName);
		p.setAge(0);
		assertTrue("Person objects should be equal when last names match, "
				+ "first names match, and ages are not set"
				, myPerson.equals(p));
		assertTrue("Person objects should be equal when last names match, "
				+ "first names match, and ages are not set"
				, p.equals(myPerson));
		
		//equal except case on first (last already handled)
		myPerson.setLastName(lastName);
		myPerson.setFirstName(firstName.toUpperCase());
		myPerson.setAge(0);
		p.setLastName(lastName);
		p.setFirstName(firstName.toLowerCase());
		p.setAge(0);
		assertFalse("Person objects should not be equal when last names match, "
				+ "first names do not match case, and ages are not set"
				, myPerson.equals(p));
		assertFalse("Person objects should be equal when last names match, "
				+ "first names do not match case, and ages are not set"
				, p.equals(myPerson));
		
		//first names not equal (we've already handled last names not equal)
		myPerson.setLastName(lastName);
		myPerson.setFirstName(firstName);
		myPerson.setAge(0);
		p.setLastName(lastName);
		p.setFirstName("Andrew");
		p.setAge(0);
		assertFalse("Person objects should not be equal when last names match, "
				+ "first names do not match, and ages are not set"
				, myPerson.equals(p));
		assertFalse("Person objects should not be equal when last names match, "
				+ "first names do not match, and ages are not set"
				, p.equals(myPerson));
		
		//one first name null when last is set
		myPerson.setLastName(lastName);
		myPerson.setFirstName(firstName);
		myPerson.setAge(0);
		p.setLastName(lastName);
		p.setFirstName(null);
		p.setAge(0);
		assertFalse("Person objects should not be equal when last names match, "
				+ "one first name is null, and ages are not set"
				, myPerson.equals(p));
		assertFalse("Person objects should not be equal when last names match, "
				+ "one first name is null, and ages are not set"
				, p.equals(myPerson));
				
14) Add the code to handle the last name/first name equality

		else if (!thisLastNameNull && !objLastNameNull)
    	{
    		//anticipating the next states, we'll just set to a value
    		//remember, case-sensitivity would require equalsIgnoreCase
    		_returnValue = this.getLastName().equals(p.getLastName());
    		if (_returnValue)
    		{
    			//both first names must NOT BE NULL, or they aren't equal
    			if ((thisFirstNameNull && !objFirstNameNull) ||
    					(!thisFirstNameNull && objFirstNameNull))
    			{
    				return false;
    			}
    			else if (!thisFirstNameNull && !objFirstNameNull)
    			{
    				//compare the first names
    				//remember to handle case sensitivity if needed
    				_returnValue = this.getFirstName().equals(p.getFirstName());
    			}
    			else if (thisFirstNameNull && objFirstNameNull)
    			{
    				//both firsts are null
    				_returnValue = true;
    			}
    			
    			//age only matters if first hasn't prevented it from mattering
				if (_returnValue)
				{
					//code for also having first name/age set will go here
					//age comparison
					_returnValue = this.getAge() == p.getAge();
				}
    		}
    		return _returnValue;
    	}
    	
  15) Add some final tests to make sure future people don't change the functionality
      and forget that the firstnames and lastnames must be equally set to be equal
      
      /***********  FINAL TESTS FOR SECURITY OF CODE ***************/
		//both last names must be null or set, can't be a mix:
		myPerson.setLastName(lastName);
		myPerson.setFirstName(null);
		myPerson.setAge(0);
		p.setLastName(null);
		p.setFirstName(null);
		p.setAge(0);
		assertFalse("Person objects should not be equal when one last name is null"
				, myPerson.equals(p));
		assertFalse("Person objects should not be equal when one last name is null"
				, p.equals(myPerson));
		
		myPerson.setLastName(lastName);
		myPerson.setFirstName(null);
		myPerson.setAge(0);
		p.setLastName(lastName);
		p.setFirstName(firstName);
		p.setAge(0);
		assertFalse("Person objects should not be equal when one first name is null"
				, myPerson.equals(p));
		assertFalse("Person objects should not be equal when one first name is null"
				, p.equals(myPerson));
		
		//ages are integers so they can't be null, but one could be set and one could be 0.
		//the thing is, that's just a standard integer comparison, and we hit that even with 
		//both of the other properties being null so there is no need for another test
		
	//assure tests still pass
	//clean up code and take out any comments you want
	
16) Test Reflexive and Transitive
		/************** TEST REFLEXIVE AND TRANSITIVE ****************************/
		myPerson = new Person(lastName, firstName, age);
		assertTrue("Equality must be reflexive"
					, myPerson.equals(myPerson));
		
		p = new Person(lastName, firstName, age);
		Person p2 = new Person(lastName, firstName, age);
		assertTrue("Two person objects with identical properties should be equal"
				, myPerson.equals(p));
		assertTrue("Two person objects with identical properties should be equal"
					, p.equals(p2));
		assertTrue("Two person objects with identical properties should be equal"
				+ " by transitive property of equality"
				, myPerson.equals(p2));
17) Done!
	
