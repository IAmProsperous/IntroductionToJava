/**
     * Override Equality
     * @param o The object to test for equality
     * @return boolean representing whether or not the incoming
     * 			object is equal to this object.
     */
    public boolean equals(Object obj)
    {
    	//an object cannot be equal to null
    	//and an object Person must be passed in or the 
    	//    two objects are not equal
    	if (obj == null || !(obj instanceof Person))
    	{
    		return false;
    	}
    	
    	//now we know that the incoming object is a person
    	Person p = (Person)obj;
    	
    	//determine the properties to compare for equality
    	//in this case, lastname, firstname, age
    	//good practice would be to test the one that is MOST likely not equal
    	//in this case, that would be the last name or age.
    	//this will just help the method end more quickly if something doesn't match
    	//in the end, we need to make sure that all properties aren't equal, and it could
    	//be done in any order, as long as it's done correctly.
    	
    	//we know we have two non-null Person objects at this point, but properties may not
    	//be set.  So we need to keep that in mind as we go.  Let's do Last Name, age, first name
    	//as our order of least likely to be equal (it's really arbitrary!)
    	
    	//first get the state of each side
    	boolean thisLastNameNull = this.getLastName() == null;
    	boolean thisFirstNameNull = this.getFirstName() == null;
    	boolean thisAgeZero = this.getAge() == 0;
    	boolean objLastNameNull = p.getLastName() == null;
    	boolean objFirstNameNull = p.getFirstName() == null;
    	boolean objAgeZero = p.getAge() == 0;
    	boolean _returnValue = false;
    	
    	if (thisLastNameNull && objLastNameNull)
    	{
    		//last names null
    		if (thisFirstNameNull && objFirstNameNull)
    		{
    			//first names null, can just return equality on ages
    			//handles both set and unset ages
    			return this.getAge() == p.getAge();
    		}
    		else if (!thisFirstNameNull && !objFirstNameNull)
    		{
    			//remember, we already know from our grid that
    			//if only one is null, then objects are automatically 
    			//not equal so we don't have to code those two if statements!
    			//also, we can rely on string equality
    			//NOTE: If case matters to you, then you have to use equalsIgnoreCase
    			_returnValue = this.getFirstName().equals(p.getFirstName());
    			if (_returnValue)
    			{
    				_returnValue = this.getAge() == p.getAge();
    			}
    			return _returnValue;
    		}
    		//in case you're wondering, we don't need return false here
    		//as the code will fall all the way to the end where we return false
    	}
    	else if (!thisLastNameNull && !objLastNameNull)
    	{
    		//anticipating the next states, we'll just set to a value
    		//remember, case-sensitivity would require equalsIgnoreCase
    		_returnValue = this.getLastName().equals(p.getLastName());
    		if (_returnValue)
    		{
    			if ((thisFirstNameNull && !objFirstNameNull) ||
    					(!thisFirstNameNull && objFirstNameNull))
    			{
    				//both first names must NOT BE NULL, or they aren't equal
        			return false;
    			}
    			else if (!thisFirstNameNull && !objFirstNameNull)
    			{
    				//compare the first names
    				//remember to handle case sensitivity if needed
    				_returnValue = this.getFirstName().equals(p.getFirstName());
    			}
    			else if (thisFirstNameNull && objFirstNameNull)
    			{
    				//both firsts are null
    				_returnValue = true;
    			}
    			
    			//age only matters if first hasn't prevented it from mattering
				if (_returnValue)
				{
					//code for also having first name/age set will go here
					//age comparison
					_returnValue = this.getAge() == p.getAge();
				}
    		}
    		//return the result
    		return _returnValue;
    	}

    	//if code gets here, something is not matching or has unequal null/not-null settings
    	return false;
    }