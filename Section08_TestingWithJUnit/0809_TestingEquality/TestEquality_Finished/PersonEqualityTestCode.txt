	@Test
	public void testEquality()
	{
		//<object>.equals(null) should be false!
		assertFalse("Person should not be equal to null once instantiated"
						, myPerson.equals(null));
		//<object>.equals(<differentObject>) should be false!
		assertFalse("Person should not be equal to a non-person object"
						, myPerson.equals("This is a String"));
		
		//test all default state --> first/last = null && age = 0
		Person p = new Person();
		assertTrue("Two person objects should be equal when no properties are set"
						+ "on either object"
						, myPerson.equals(p));
		assertTrue("Two person objects should be equal when no properties are set"
				+ "on either object"
				, p.equals(myPerson));

		//just age to compare
		//default
		myPerson = new Person();
		p = new Person();
		assertTrue("Person objects should be equal when there is no last name, "
				+ "no first name, ages match"
				, myPerson.equals(p));
		assertTrue("Person objects should be equal when there is no last name, "
				+ "no first name, and ages match"
				, p.equals(myPerson));
		
		//ages don't match
		myPerson.setLastName(null);
		myPerson.setFirstName(null);
		myPerson.setAge(100);
		p.setLastName(null);
		p.setFirstName(null);
		p.setAge(age);
		assertFalse("Person objects should not be equal when there is no last name, "
				+ "no first name, and ages do not match"
				, myPerson.equals(p));
		assertFalse("Person objects should not be equal when there is no last name, "
				+ "no first name, and ages do not match"
				, p.equals(myPerson));
		
		//ages match not default
		myPerson.setLastName(null);
		myPerson.setFirstName(null);
		myPerson.setAge(age);
		p.setLastName(null);
		p.setFirstName(null);
		p.setAge(age);
		assertTrue("Person objects should be equal when there is no last name, "
				+ "no first name, ages match"
				, myPerson.equals(p));
		assertTrue("Person objects should be equal when there is no last name, "
				+ "no first name, and ages match"
				, p.equals(myPerson));
		
		//just first name set
		//one name is null -- makes sure that we handle that case
		myPerson.setLastName(null);
		myPerson.setFirstName(firstName);
		myPerson.setAge(0);
		p.setLastName(null);
		p.setFirstName(null);
		p.setAge(0);
		assertFalse("Person objects should not be equal when there is no last name, "
				+ "only one has a first name set, and ages are not set"
				, myPerson.equals(p));
		assertFalse("Person objects should not be equal when there is no last name, "
				+ "only one has a first name set, and ages are not set"
				, p.equals(myPerson));
		
		//names don't match
		myPerson.setLastName(null);
		myPerson.setFirstName("Andrew");
		myPerson.setAge(0);
		p.setLastName(null);
		p.setFirstName(firstName);
		p.setAge(0);
		assertFalse("Person objects should not be equal when there is no last name, "
				+ "first names do not match, and ages match"
				, myPerson.equals(p));
		assertFalse("Person objects should not be equal when there is no last name, "
				+ "first names do not match, and ages match"
				, p.equals(myPerson));
		
		//ages match not default
		myPerson.setLastName(null);
		myPerson.setFirstName(firstName);
		myPerson.setAge(0);
		p.setLastName(null);
		p.setFirstName(firstName);
		p.setAge(0);
		assertTrue("Person objects should be equal when there is no last name, "
				+ "first names match, and ages are not set"
				, myPerson.equals(p));
		assertTrue("Person objects should be equal when there is no last name, "
				+ "first names match, and ages are not set"
				, p.equals(myPerson));
		
		//does case matter?  you have to make that call!
		//if this should be equal for your system
		//you have to set the asserts to True, explain the details
		//and make sure to change the code in Person equality to use
		//equals, instead of equalsIgnoreCase
		myPerson.setLastName(null);
		myPerson.setFirstName("anyFirstName");
		myPerson.setAge(0);
		p.setLastName(null);
		p.setFirstName("AnYFIrstNAME");
		p.setAge(0);
		assertFalse("Person objects should not be equal when there is no last name, "
				+ "first names do not match on case, and ages are not set"
				, myPerson.equals(p));
		assertFalse("Person objects should not be equal when there is no last name, "
				+ "first names do not match on case, and ages are not set"
				, p.equals(myPerson));
		
		/******* No Last Name, but first and age are set *********/
		//we've already tested when one first name is null. Age can't be null
		//both equal
		myPerson.setLastName(null);
		myPerson.setFirstName(firstName);
		myPerson.setAge(age);
		p.setLastName(null);
		p.setFirstName(firstName);
		p.setAge(age);
		assertTrue("Person objects should be equal when there is no last name, "
				+ "first names match, and ages match"
				, myPerson.equals(p));
		assertTrue("Person objects should be equal when there is no last name, "
				+ "first names match, and ages match"
				, p.equals(myPerson));
		
		//first equal, age not equal
		myPerson.setLastName(null);
		myPerson.setFirstName(firstName);
		myPerson.setAge(age);
		p.setLastName(null);
		p.setFirstName(firstName);
		p.setAge(100);
		assertFalse("Person objects should not be equal when there is no last name, "
				+ "first names match, and ages do not match"
				, myPerson.equals(p));
		assertFalse("Person objects should not be equal when there is no last name, "
				+ "first names match, and ages do not match"
				, p.equals(myPerson));
		
		//first not equal, age doesn't matter in this case
		myPerson.setLastName(null);
		myPerson.setFirstName(firstName);
		myPerson.setAge(age);
		p.setLastName(null);
		p.setFirstName("Andrew");
		p.setAge(100);
		assertFalse("Person objects should not be equal when there is no last name, "
				+ "and first names do not match"
				, myPerson.equals(p));
		assertFalse("Person objects should not be equal when there is no last name, "
				+ "and first names do not match"
				, p.equals(myPerson));
		
		
		/****** JUST LAST NAME SET **************/
		//equal
		myPerson.setLastName(lastName);
		myPerson.setFirstName(null);
		myPerson.setAge(0);
		p.setLastName(lastName);
		p.setFirstName(null);
		p.setAge(0);
		assertTrue("Person objects should be equal when last names match, "
				+ "first names are not set, and ages are not set"
				, myPerson.equals(p));
		assertTrue("Person objects should be equal when last names match, "
				+ "first names are not set, and ages are not set"
				, p.equals(myPerson));
		
		//last names not equal (first name and age irrelevant)
		myPerson.setLastName(lastName);
		myPerson.setFirstName(null);
		myPerson.setAge(0);
		p.setLastName("Andrews");
		p.setFirstName(null);
		p.setAge(0);
		assertFalse("Person objects should not be equal when last names do not match, "
				+ "regardless of first name and age"
				, myPerson.equals(p));
		assertFalse("Person objects should not be equal when last names do not match, "
				+ "regardless of first name and age"
				, p.equals(myPerson));
		
		//last name case-sensitivity
		myPerson.setLastName("anyLastName");
		myPerson.setFirstName(null);
		myPerson.setAge(0);
		p.setLastName("AnYLAsTNaME");
		p.setFirstName(null);
		p.setAge(0);
		assertFalse("Person objects should not be equal when last names do not match"
				+ " on case.  FirstName and Age are irrelevant"
				, myPerson.equals(p));
		assertFalse("Person objects should not be equal when last names do not match"
				+ " on case.  FirstName and Age are irrelevant"
				, p.equals(myPerson));
		
		/********** LAST NAME AND AGE ONLY, NO FIRST NAME *************************/
		//equal
		myPerson.setLastName(lastName);
		myPerson.setFirstName(null);
		myPerson.setAge(age);
		p.setLastName(lastName);
		p.setFirstName(null);
		p.setAge(age);
		assertTrue("Person objects should be equal when last names match, "
				+ "first names are not set, and ages match"
				, myPerson.equals(p));
		assertTrue("Person objects should be equal when last names match, "
				+ "first names are not set, and ages match"
				, p.equals(myPerson));
		
		//ages not equal
		myPerson.setLastName(lastName);
		myPerson.setFirstName(null);
		myPerson.setAge(age);
		p.setLastName(lastName);
		p.setFirstName(null);
		p.setAge(100);
		assertFalse("Person objects should not be equal when last names match, "
				+ "first names are not set, and ages do not match"
				, myPerson.equals(p));
		assertFalse("Person objects should not be equal when last names match, "
				+ "first names are not set, and ages do not match"
				, p.equals(myPerson));
		
		//we don't need to test if lastnames aren't equal, as we've already don that
		
		/******************* LAST NAME AND FIRST NAME ONLY **********************/
		//equal
		myPerson.setLastName(lastName);
		myPerson.setFirstName(firstName);
		myPerson.setAge(0);
		p.setLastName(lastName);
		p.setFirstName(firstName);
		p.setAge(0);
		assertTrue("Person objects should be equal when last names match, "
				+ "first names match, and ages are not set"
				, myPerson.equals(p));
		assertTrue("Person objects should be equal when last names match, "
				+ "first names match, and ages are not set"
				, p.equals(myPerson));
		
		//equal except case on first (last already handled)
		myPerson.setLastName(lastName);
		myPerson.setFirstName(firstName.toUpperCase());
		myPerson.setAge(0);
		p.setLastName(lastName);
		p.setFirstName(firstName.toLowerCase());
		p.setAge(0);
		assertFalse("Person objects should not be equal when last names match, "
				+ "first names do not match case, and ages are not set"
				, myPerson.equals(p));
		assertFalse("Person objects should be equal when last names match, "
				+ "first names do not match case, and ages are not set"
				, p.equals(myPerson));
		
		//first names not equal (we've already handled last names not equal)
		myPerson.setLastName(lastName);
		myPerson.setFirstName(firstName);
		myPerson.setAge(0);
		p.setLastName(lastName);
		p.setFirstName("Andrew");
		p.setAge(0);
		assertFalse("Person objects should not be equal when last names match, "
				+ "first names do not match, and ages are not set"
				, myPerson.equals(p));
		assertFalse("Person objects should not be equal when last names match, "
				+ "first names do not match, and ages are not set"
				, p.equals(myPerson));
		
		//one first name null when last is set
		myPerson.setLastName(lastName);
		myPerson.setFirstName(firstName);
		myPerson.setAge(0);
		p.setLastName(lastName);
		p.setFirstName(null);
		p.setAge(0);
		assertFalse("Person objects should not be equal when last names match, "
				+ "one first name is null, and ages are not set"
				, myPerson.equals(p));
		assertFalse("Person objects should not be equal when last names match, "
				+ "one first name is null, and ages are not set"
				, p.equals(myPerson));
		
		
		//last, first, and age set
		//last, first and ages equal
		myPerson.setLastName(lastName);
		myPerson.setFirstName(firstName);
		myPerson.setAge(age);
		p.setLastName(lastName);
		p.setFirstName(firstName);
		p.setAge(age);
		assertTrue("Person objects should be equal when last names match, "
				+ "first names match, and ages match"
				, myPerson.equals(p));
		assertTrue("Person objects should be equal when last names match, "
				+ "first names match, and ages match"
				, p.equals(myPerson));
		
		//ages not equal
		myPerson.setLastName(lastName);
		myPerson.setFirstName(firstName);
		myPerson.setAge(age);
		p.setLastName(lastName);
		p.setFirstName(firstName);
		p.setAge(100);
		assertFalse("Person objects should not be equal when last names match, "
				+ "first names match, and ages do not match"
				, myPerson.equals(p));
		assertFalse("Person objects should not be equal when last names match, "
				+ "first names match, and ages do not match"
				, p.equals(myPerson));
		
		/***********  FINAL TESTS FOR SECURITY OF CODE ***************/
		//both last names must be null or set, can't be a mix:
		myPerson.setLastName(lastName);
		myPerson.setFirstName(null);
		myPerson.setAge(0);
		p.setLastName(null);
		p.setFirstName(null);
		p.setAge(0);
		assertFalse("Person objects should not be equal when one last name is null"
				, myPerson.equals(p));
		assertFalse("Person objects should not be equal when one last name is null"
				, p.equals(myPerson));
		
		myPerson.setLastName(lastName);
		myPerson.setFirstName(null);
		myPerson.setAge(0);
		p.setLastName(lastName);
		p.setFirstName(firstName);
		p.setAge(0);
		assertFalse("Person objects should not be equal when one first name is null"
				, myPerson.equals(p));
		assertFalse("Person objects should not be equal when one first name is null"
				, p.equals(myPerson));
		
		//ages are integers so they can't be null, but one could be set and one could be 0.
		//the thing is, that's just a standard integer comparison, and we hit that even with 
		//both of the other properties being null so there is no need for another test
	}